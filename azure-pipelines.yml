trigger:
- develop

variables:
  azureServiceConnectionId: 'cdc8e9a8-3171-4c1e-8a9b-2dead16f5001'
  webAppName: 'IS2-B-B2-PROD'
  vmImageName: 'ubuntu-latest'
  environmentName: 'IS2-B-B2-PROD'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.12.8'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      name: 'Pool de agentes autogestionados'
    steps:
    - script: |
        sudo apt update
        sudo apt install -y software-properties-common
        sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt update
        sudo apt install -y python3.12 python3.12-venv python3.12-dev
        python3.12 --version
      displayName: 'Install Python 3.12.8'

    - script: |
        sudo apt install -y zip
      displayName: 'Install zip utility'

    - script: |
        python3.12 -m venv antenv
        source antenv/bin/activate
        python3.12 -m pip install --upgrade pip
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: true
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      name: 'Pool de agentes autogestionados'
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              python3.12 --version
            displayName: 'Verify Python Version'

          - script: |
              if [ ! -f "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip" ]; then
                echo "Error: ZIP file not found!"
                exit 1
              fi
            displayName: 'Verify ZIP File'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : $(webAppName)'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              deploymentMethod: 'zipDeploy'
